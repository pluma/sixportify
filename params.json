{"name":"sixportify","tagline":"ES-harmony-style module exports","body":"# Synopsis\r\n\r\n**sixportify** is a [browserify](https://github.com/substack/node-browserify) transform that enables you to write CommonJS module exports [as if you were using ES6](http://wiki.ecmascript.org/doku.php?id=harmony:modules) (also known as harmony).\r\n\r\n[![NPM version](https://badge.fury.io/js/sixportify.png)](http://badge.fury.io/js/sixportify) [![Dependencies](https://david-dm.org/pluma/sixportify.png)](https://david-dm.org/pluma/sixportify)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install sixportify\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/sixportify.git\r\ncd sixportify\r\nnpm install\r\n```\r\n\r\n# Basic usage example\r\n\r\n## somelib.js\r\n\r\n```javascript\r\nexport var config = {x: 4};\r\nexport function addX(y) {\r\n    return config.x + y;\r\n}\r\n```\r\n\r\n## index.js\r\n\r\n```javascript\r\nvar somelib = require('./somelib.js');\r\nconsole.log(somelib.addX(1)); // 5\r\nsomelib.config.x = 2;\r\nconsole.log(somelib.addX(1)); // 3\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    sixportify = require('sixportify'),\r\n    b = browserify();\r\n\r\nb.transform(sixportify);\r\nb.add('./index.js');\r\nb.bundle().pipe(require('fs').createWriteStream('bundle.js'));\r\n```\r\n\r\n# Usage example with `es6ify`\r\n\r\n## somelib.js\r\n\r\n```javascript\r\nconst BAR = \"Hello World!\";\r\nexport class Foo {\r\n    greet() {\r\n        console.log(BAR);\r\n    }\r\n}\r\n```\r\n\r\n## index.js\r\n\r\n```javascript\r\nvar {Foo} = require('./somelib.js');\r\n(new Foo()).greet(); // \"Hello World!\"\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    siportify = require('sixportify'),\r\n    es6ify = require('es6ify'),\r\n    b = browserify();\r\n\r\nb.transform(sixportify); // should always come before es6ify\r\nb.add(es6ify.runtime);\r\nb.transform(es6ify);\r\nb.add('./index.js');\r\nb.bundle().pipe(require('fs').createWriteStream('bundle.js'));\r\n```\r\n\r\n# Caveats\r\n\r\nThe implementation is incredibly na√Øve.\r\n\r\nIf your export statements are not at the beginning of the line (optionally indented with any whitespace character), `sixportify` won't find them:\r\n\r\n```javascript\r\n// This won't work.\r\nvar foo = 'bar'; export var baz = 'qux';\r\n\r\n// This won't work either.\r\nexport var\r\n    foo = 'bar';\r\n\r\n// Nor will this.\r\nexport var foo = 'bar',\r\n    qux = 'baz'; // `qux` will not be exported!\r\n\r\n// This is fine, though:\r\nexport var foo = {\r\n    'bar': 'qux'\r\n};\r\n```\r\n\r\nWhile `sixportify` works just fine with variable declarations,\r\nkeep in mind that re-assignment may have unintended consequences. E.g.\r\n\r\n```javascript\r\nexport var foo = 'bar';\r\nfoo = 'qux';\r\n```\r\n\r\nIn this case the value that will actually be exported as `exports.foo`\r\nwill be `\"qux\"`, not `\"bar\"`.\r\n\r\nYou should therefore treat exported `var` declarations as constants.\r\n\r\nLikewise, the following will not work as intended:\r\n\r\n```javascript\r\n// in somelib.js\r\nexport var foo = 'bar';\r\nexport function greet() {\r\n    console.log('Hello, ' + foo + '!'); // still refers to the local var\r\n}\r\n\r\n// in index.js\r\nvar somelib = require('./somelib.js');\r\nsomelib.foo = 'world'; // re-assigns the exported var\r\nsomelib.greet(); // \"Hello bar!\"\r\n```\r\n\r\n# ES6/harmony, let, const, generators and classes\r\n\r\nIf you want to use `sixportify` with ES6-style classes, you can do that:\r\n\r\n```javascript\r\n// in somelib.es6\r\nexport class Foo {\r\n    greet() {\r\n        console.log('sup');\r\n    }\r\n}\r\n\r\n// in index.es6\r\nvar Foo = require('./somelib.es6').Foo;\r\nvar foo = new Foo();\r\nfoo.greet(); // \"sup\"\r\n```\r\n\r\nGenerators (`function*`) as well as variables declared with `let` or `const`\r\nare fully supported too (even though the latter two shouldn't really be exportable according to harmony -- if the runtime supports it, `sixportify` won't judge you).\r\n\r\nThis means you can use sixportify to preprocess your ES6-style exports for [es6ify](https://github.com/thlorenz/es6ify).\r\n\r\nKeep in mind that `sixportify` does not understand decomposition, so the following will not work:\r\n\r\n```javascript\r\n// BROKEN!\r\nvar obj = {'foo': 'bar'};\r\nexport var {foo} = obj;\r\n// ALSO BROKEN!\r\nvar arr = ['hello'];\r\nexport var [qux] = arr;\r\n```\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/sixportify/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}